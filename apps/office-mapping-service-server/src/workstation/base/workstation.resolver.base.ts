/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Workstation } from "./Workstation";
import { WorkstationCountArgs } from "./WorkstationCountArgs";
import { WorkstationFindManyArgs } from "./WorkstationFindManyArgs";
import { WorkstationFindUniqueArgs } from "./WorkstationFindUniqueArgs";
import { CreateWorkstationArgs } from "./CreateWorkstationArgs";
import { UpdateWorkstationArgs } from "./UpdateWorkstationArgs";
import { DeleteWorkstationArgs } from "./DeleteWorkstationArgs";
import { WorkstationService } from "../workstation.service";
@graphql.Resolver(() => Workstation)
export class WorkstationResolverBase {
  constructor(protected readonly service: WorkstationService) {}

  async _workstationsMeta(
    @graphql.Args() args: WorkstationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Workstation])
  async workstations(
    @graphql.Args() args: WorkstationFindManyArgs
  ): Promise<Workstation[]> {
    return this.service.workstations(args);
  }

  @graphql.Query(() => Workstation, { nullable: true })
  async workstation(
    @graphql.Args() args: WorkstationFindUniqueArgs
  ): Promise<Workstation | null> {
    const result = await this.service.workstation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Workstation)
  async createWorkstation(
    @graphql.Args() args: CreateWorkstationArgs
  ): Promise<Workstation> {
    return await this.service.createWorkstation({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Workstation)
  async updateWorkstation(
    @graphql.Args() args: UpdateWorkstationArgs
  ): Promise<Workstation | null> {
    try {
      return await this.service.updateWorkstation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Workstation)
  async deleteWorkstation(
    @graphql.Args() args: DeleteWorkstationArgs
  ): Promise<Workstation | null> {
    try {
      return await this.service.deleteWorkstation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
