/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Workstation as PrismaWorkstation } from "@prisma/client";

export class WorkstationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WorkstationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.workstation.count(args);
  }

  async workstations(
    args: Prisma.WorkstationFindManyArgs
  ): Promise<PrismaWorkstation[]> {
    return this.prisma.workstation.findMany(args);
  }
  async workstation(
    args: Prisma.WorkstationFindUniqueArgs
  ): Promise<PrismaWorkstation | null> {
    return this.prisma.workstation.findUnique(args);
  }
  async createWorkstation(
    args: Prisma.WorkstationCreateArgs
  ): Promise<PrismaWorkstation> {
    return this.prisma.workstation.create(args);
  }
  async updateWorkstation(
    args: Prisma.WorkstationUpdateArgs
  ): Promise<PrismaWorkstation> {
    return this.prisma.workstation.update(args);
  }
  async deleteWorkstation(
    args: Prisma.WorkstationDeleteArgs
  ): Promise<PrismaWorkstation> {
    return this.prisma.workstation.delete(args);
  }
}
