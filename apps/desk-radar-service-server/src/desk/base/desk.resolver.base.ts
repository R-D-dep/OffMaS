/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Desk } from "./Desk";
import { DeskCountArgs } from "./DeskCountArgs";
import { DeskFindManyArgs } from "./DeskFindManyArgs";
import { DeskFindUniqueArgs } from "./DeskFindUniqueArgs";
import { CreateDeskArgs } from "./CreateDeskArgs";
import { UpdateDeskArgs } from "./UpdateDeskArgs";
import { DeleteDeskArgs } from "./DeleteDeskArgs";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { Room } from "../../room/base/Room";
import { DeskService } from "../desk.service";
@graphql.Resolver(() => Desk)
export class DeskResolverBase {
  constructor(protected readonly service: DeskService) {}

  async _desksMeta(
    @graphql.Args() args: DeskCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Desk])
  async desks(@graphql.Args() args: DeskFindManyArgs): Promise<Desk[]> {
    return this.service.desks(args);
  }

  @graphql.Query(() => Desk, { nullable: true })
  async desk(@graphql.Args() args: DeskFindUniqueArgs): Promise<Desk | null> {
    const result = await this.service.desk(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Desk)
  async createDesk(@graphql.Args() args: CreateDeskArgs): Promise<Desk> {
    return await this.service.createDesk({
      ...args,
      data: {
        ...args.data,

        room: args.data.room
          ? {
              connect: args.data.room,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Desk)
  async updateDesk(@graphql.Args() args: UpdateDeskArgs): Promise<Desk | null> {
    try {
      return await this.service.updateDesk({
        ...args,
        data: {
          ...args.data,

          room: args.data.room
            ? {
                connect: args.data.room,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Desk)
  async deleteDesk(@graphql.Args() args: DeleteDeskArgs): Promise<Desk | null> {
    try {
      return await this.service.deleteDesk(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Booking], { name: "bookings" })
  async findBookings(
    @graphql.Parent() parent: Desk,
    @graphql.Args() args: BookingFindManyArgs
  ): Promise<Booking[]> {
    const results = await this.service.findBookings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Room, {
    nullable: true,
    name: "room",
  })
  async getRoom(@graphql.Parent() parent: Desk): Promise<Room | null> {
    const result = await this.service.getRoom(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
