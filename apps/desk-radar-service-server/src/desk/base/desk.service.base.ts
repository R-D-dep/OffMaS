/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Desk as PrismaDesk,
  Booking as PrismaBooking,
  Room as PrismaRoom,
} from "@prisma/client";

export class DeskServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DeskCountArgs, "select">): Promise<number> {
    return this.prisma.desk.count(args);
  }

  async desks(args: Prisma.DeskFindManyArgs): Promise<PrismaDesk[]> {
    return this.prisma.desk.findMany(args);
  }
  async desk(args: Prisma.DeskFindUniqueArgs): Promise<PrismaDesk | null> {
    return this.prisma.desk.findUnique(args);
  }
  async createDesk(args: Prisma.DeskCreateArgs): Promise<PrismaDesk> {
    return this.prisma.desk.create(args);
  }
  async updateDesk(args: Prisma.DeskUpdateArgs): Promise<PrismaDesk> {
    return this.prisma.desk.update(args);
  }
  async deleteDesk(args: Prisma.DeskDeleteArgs): Promise<PrismaDesk> {
    return this.prisma.desk.delete(args);
  }

  async findBookings(
    parentId: string,
    args: Prisma.BookingFindManyArgs
  ): Promise<PrismaBooking[]> {
    return this.prisma.desk
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookings(args);
  }

  async getRoom(parentId: string): Promise<PrismaRoom | null> {
    return this.prisma.desk
      .findUnique({
        where: { id: parentId },
      })
      .room();
  }
}
