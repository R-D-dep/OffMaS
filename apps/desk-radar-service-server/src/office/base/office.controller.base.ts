/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OfficeService } from "../office.service";
import { OfficeCreateInput } from "./OfficeCreateInput";
import { Office } from "./Office";
import { OfficeFindManyArgs } from "./OfficeFindManyArgs";
import { OfficeWhereUniqueInput } from "./OfficeWhereUniqueInput";
import { OfficeUpdateInput } from "./OfficeUpdateInput";
import { RoomFindManyArgs } from "../../room/base/RoomFindManyArgs";
import { Room } from "../../room/base/Room";
import { RoomWhereUniqueInput } from "../../room/base/RoomWhereUniqueInput";

export class OfficeControllerBase {
  constructor(protected readonly service: OfficeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Office })
  async createOffice(@common.Body() data: OfficeCreateInput): Promise<Office> {
    return await this.service.createOffice({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        location: true,
        image: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Office] })
  @ApiNestedQuery(OfficeFindManyArgs)
  async offices(@common.Req() request: Request): Promise<Office[]> {
    const args = plainToClass(OfficeFindManyArgs, request.query);
    return this.service.offices({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        location: true,
        image: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Office })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async office(
    @common.Param() params: OfficeWhereUniqueInput
  ): Promise<Office | null> {
    const result = await this.service.office({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        location: true,
        image: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Office })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOffice(
    @common.Param() params: OfficeWhereUniqueInput,
    @common.Body() data: OfficeUpdateInput
  ): Promise<Office | null> {
    try {
      return await this.service.updateOffice({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          location: true,
          image: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Office })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOffice(
    @common.Param() params: OfficeWhereUniqueInput
  ): Promise<Office | null> {
    try {
      return await this.service.deleteOffice({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          location: true,
          image: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/rooms")
  @ApiNestedQuery(RoomFindManyArgs)
  async findRooms(
    @common.Req() request: Request,
    @common.Param() params: OfficeWhereUniqueInput
  ): Promise<Room[]> {
    const query = plainToClass(RoomFindManyArgs, request.query);
    const results = await this.service.findRooms(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        office: {
          select: {
            id: true,
          },
        },

        image: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/rooms")
  async connectRooms(
    @common.Param() params: OfficeWhereUniqueInput,
    @common.Body() body: RoomWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rooms: {
        connect: body,
      },
    };
    await this.service.updateOffice({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/rooms")
  async updateRooms(
    @common.Param() params: OfficeWhereUniqueInput,
    @common.Body() body: RoomWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rooms: {
        set: body,
      },
    };
    await this.service.updateOffice({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/rooms")
  async disconnectRooms(
    @common.Param() params: OfficeWhereUniqueInput,
    @common.Body() body: RoomWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rooms: {
        disconnect: body,
      },
    };
    await this.service.updateOffice({
      where: params,
      data,
      select: { id: true },
    });
  }
}
